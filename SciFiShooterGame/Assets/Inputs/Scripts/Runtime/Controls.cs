//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.9.0
//     from Assets/Inputs/Scripts/Runtime/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

namespace GlobalInputs
{
    public partial class @Controls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""c25e1f03-a1eb-4d25-9e1d-40115a3ebe95"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""d5164fcb-6d09-40d7-99db-591210098aaa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""5b9fb3ad-b3d0-4eb8-a5ef-6401b8e8edc7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""48dbc337-bebd-4013-a2f1-d222a85460f5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""fd4eb59b-892b-4389-85b3-23021aa91731"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7fc901a2-5a3b-4040-8a37-1cdaa4d91e47"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""2ca47bb3-d14e-4808-a9a5-a3373afd3b1a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f5aabdbb-68a5-41f9-b312-df050ab17aba"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c328be42-c095-48f3-9ce6-05e9145d4287"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""940f81ec-78a7-4b76-9225-9b5fab8b8bdb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ada7b31f-bf01-4991-a70f-2dbbb092156c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0c041479-dc5c-4570-893b-30811078cecd"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1207f123-218c-49cd-bf25-64455d0f646f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Weapon"",
            ""id"": ""30a23fe7-59f8-43d4-a343-d41c1d1cdca4"",
            ""actions"": [
                {
                    ""name"": ""MainWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""509c0464-159d-40db-9b0b-7d73c0eeed74"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""54cadd91-1324-46f4-bbb1-aa38fb1dd79a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MeleeWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""ebdbd268-b452-450c-90a1-341709a1d9e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowableWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""68593e5a-3f19-4f1c-a67a-74946dc98094"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapons"",
                    ""type"": ""Button"",
                    ""id"": ""aa4cead1-ffb6-485a-bc84-26ab09046b3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""392db4d3-0bfa-43f9-b2bb-ebde41439267"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreciseShooting"",
                    ""type"": ""Button"",
                    ""id"": ""0cb105a3-c311-49e9-82e6-aa991ee33f74"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""26dbcf30-380d-4379-81ae-f7ad9ca48837"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15a6fa7e-992d-4b8e-9222-35d34330055a"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04c4d5a5-e206-4c55-82c4-bdfd517a3941"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MeleeWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4223981-bda0-4f0e-837f-6c858eb0b0ba"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrowableWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b0f7e0f-e351-468b-89d2-434eea9dad56"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a69da6ae-c557-4648-b12c-54b06a694da2"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01fce896-e38c-4a6f-bb32-ce104aaa5393"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreciseShooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Character
            m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
            m_Character_Fire = m_Character.FindAction("Fire", throwIfNotFound: true);
            m_Character_Movement = m_Character.FindAction("Movement", throwIfNotFound: true);
            m_Character_Aim = m_Character.FindAction("Aim", throwIfNotFound: true);
            m_Character_Run = m_Character.FindAction("Run", throwIfNotFound: true);
            // Weapon
            m_Weapon = asset.FindActionMap("Weapon", throwIfNotFound: true);
            m_Weapon_MainWeapon = m_Weapon.FindAction("MainWeapon", throwIfNotFound: true);
            m_Weapon_SecondaryWeapon = m_Weapon.FindAction("SecondaryWeapon", throwIfNotFound: true);
            m_Weapon_MeleeWeapon = m_Weapon.FindAction("MeleeWeapon", throwIfNotFound: true);
            m_Weapon_ThrowableWeapon = m_Weapon.FindAction("ThrowableWeapon", throwIfNotFound: true);
            m_Weapon_SwitchWeapons = m_Weapon.FindAction("SwitchWeapons", throwIfNotFound: true);
            m_Weapon_Reload = m_Weapon.FindAction("Reload", throwIfNotFound: true);
            m_Weapon_PreciseShooting = m_Weapon.FindAction("PreciseShooting", throwIfNotFound: true);
        }

        ~@Controls()
        {
            Debug.Assert(!m_Character.enabled, "This will cause a leak and performance issues, Controls.Character.Disable() has not been called.");
            Debug.Assert(!m_Weapon.enabled, "This will cause a leak and performance issues, Controls.Weapon.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Character
        private readonly InputActionMap m_Character;
        private List<ICharacterActions> m_CharacterActionsCallbackInterfaces = new List<ICharacterActions>();
        private readonly InputAction m_Character_Fire;
        private readonly InputAction m_Character_Movement;
        private readonly InputAction m_Character_Aim;
        private readonly InputAction m_Character_Run;
        public struct CharacterActions
        {
            private @Controls m_Wrapper;
            public CharacterActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Fire => m_Wrapper.m_Character_Fire;
            public InputAction @Movement => m_Wrapper.m_Character_Movement;
            public InputAction @Aim => m_Wrapper.m_Character_Aim;
            public InputAction @Run => m_Wrapper.m_Character_Run;
            public InputActionMap Get() { return m_Wrapper.m_Character; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
            public void AddCallbacks(ICharacterActions instance)
            {
                if (instance == null || m_Wrapper.m_CharacterActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CharacterActionsCallbackInterfaces.Add(instance);
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }

            private void UnregisterCallbacks(ICharacterActions instance)
            {
                @Fire.started -= instance.OnFire;
                @Fire.performed -= instance.OnFire;
                @Fire.canceled -= instance.OnFire;
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Aim.started -= instance.OnAim;
                @Aim.performed -= instance.OnAim;
                @Aim.canceled -= instance.OnAim;
                @Run.started -= instance.OnRun;
                @Run.performed -= instance.OnRun;
                @Run.canceled -= instance.OnRun;
            }

            public void RemoveCallbacks(ICharacterActions instance)
            {
                if (m_Wrapper.m_CharacterActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICharacterActions instance)
            {
                foreach (var item in m_Wrapper.m_CharacterActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CharacterActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CharacterActions @Character => new CharacterActions(this);

        // Weapon
        private readonly InputActionMap m_Weapon;
        private List<IWeaponActions> m_WeaponActionsCallbackInterfaces = new List<IWeaponActions>();
        private readonly InputAction m_Weapon_MainWeapon;
        private readonly InputAction m_Weapon_SecondaryWeapon;
        private readonly InputAction m_Weapon_MeleeWeapon;
        private readonly InputAction m_Weapon_ThrowableWeapon;
        private readonly InputAction m_Weapon_SwitchWeapons;
        private readonly InputAction m_Weapon_Reload;
        private readonly InputAction m_Weapon_PreciseShooting;
        public struct WeaponActions
        {
            private @Controls m_Wrapper;
            public WeaponActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MainWeapon => m_Wrapper.m_Weapon_MainWeapon;
            public InputAction @SecondaryWeapon => m_Wrapper.m_Weapon_SecondaryWeapon;
            public InputAction @MeleeWeapon => m_Wrapper.m_Weapon_MeleeWeapon;
            public InputAction @ThrowableWeapon => m_Wrapper.m_Weapon_ThrowableWeapon;
            public InputAction @SwitchWeapons => m_Wrapper.m_Weapon_SwitchWeapons;
            public InputAction @Reload => m_Wrapper.m_Weapon_Reload;
            public InputAction @PreciseShooting => m_Wrapper.m_Weapon_PreciseShooting;
            public InputActionMap Get() { return m_Wrapper.m_Weapon; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WeaponActions set) { return set.Get(); }
            public void AddCallbacks(IWeaponActions instance)
            {
                if (instance == null || m_Wrapper.m_WeaponActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_WeaponActionsCallbackInterfaces.Add(instance);
                @MainWeapon.started += instance.OnMainWeapon;
                @MainWeapon.performed += instance.OnMainWeapon;
                @MainWeapon.canceled += instance.OnMainWeapon;
                @SecondaryWeapon.started += instance.OnSecondaryWeapon;
                @SecondaryWeapon.performed += instance.OnSecondaryWeapon;
                @SecondaryWeapon.canceled += instance.OnSecondaryWeapon;
                @MeleeWeapon.started += instance.OnMeleeWeapon;
                @MeleeWeapon.performed += instance.OnMeleeWeapon;
                @MeleeWeapon.canceled += instance.OnMeleeWeapon;
                @ThrowableWeapon.started += instance.OnThrowableWeapon;
                @ThrowableWeapon.performed += instance.OnThrowableWeapon;
                @ThrowableWeapon.canceled += instance.OnThrowableWeapon;
                @SwitchWeapons.started += instance.OnSwitchWeapons;
                @SwitchWeapons.performed += instance.OnSwitchWeapons;
                @SwitchWeapons.canceled += instance.OnSwitchWeapons;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @PreciseShooting.started += instance.OnPreciseShooting;
                @PreciseShooting.performed += instance.OnPreciseShooting;
                @PreciseShooting.canceled += instance.OnPreciseShooting;
            }

            private void UnregisterCallbacks(IWeaponActions instance)
            {
                @MainWeapon.started -= instance.OnMainWeapon;
                @MainWeapon.performed -= instance.OnMainWeapon;
                @MainWeapon.canceled -= instance.OnMainWeapon;
                @SecondaryWeapon.started -= instance.OnSecondaryWeapon;
                @SecondaryWeapon.performed -= instance.OnSecondaryWeapon;
                @SecondaryWeapon.canceled -= instance.OnSecondaryWeapon;
                @MeleeWeapon.started -= instance.OnMeleeWeapon;
                @MeleeWeapon.performed -= instance.OnMeleeWeapon;
                @MeleeWeapon.canceled -= instance.OnMeleeWeapon;
                @ThrowableWeapon.started -= instance.OnThrowableWeapon;
                @ThrowableWeapon.performed -= instance.OnThrowableWeapon;
                @ThrowableWeapon.canceled -= instance.OnThrowableWeapon;
                @SwitchWeapons.started -= instance.OnSwitchWeapons;
                @SwitchWeapons.performed -= instance.OnSwitchWeapons;
                @SwitchWeapons.canceled -= instance.OnSwitchWeapons;
                @Reload.started -= instance.OnReload;
                @Reload.performed -= instance.OnReload;
                @Reload.canceled -= instance.OnReload;
                @PreciseShooting.started -= instance.OnPreciseShooting;
                @PreciseShooting.performed -= instance.OnPreciseShooting;
                @PreciseShooting.canceled -= instance.OnPreciseShooting;
            }

            public void RemoveCallbacks(IWeaponActions instance)
            {
                if (m_Wrapper.m_WeaponActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IWeaponActions instance)
            {
                foreach (var item in m_Wrapper.m_WeaponActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_WeaponActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public WeaponActions @Weapon => new WeaponActions(this);
        public interface ICharacterActions
        {
            void OnFire(InputAction.CallbackContext context);
            void OnMovement(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
        }
        public interface IWeaponActions
        {
            void OnMainWeapon(InputAction.CallbackContext context);
            void OnSecondaryWeapon(InputAction.CallbackContext context);
            void OnMeleeWeapon(InputAction.CallbackContext context);
            void OnThrowableWeapon(InputAction.CallbackContext context);
            void OnSwitchWeapons(InputAction.CallbackContext context);
            void OnReload(InputAction.CallbackContext context);
            void OnPreciseShooting(InputAction.CallbackContext context);
        }
    }
}
